<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome! on Hello QA</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Welcome! on Hello QA</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 26 Feb 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Guideline to build a simple CT</title>
      <link>http://localhost:1313/tech/quicktest/</link>
      <pubDate>Mon, 26 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/quicktest/</guid>
      <description>Basic usage &amp;nbsp; what is continuous testing?&#xA;Continuous testing aims to provide rapid and frequent feedback on the quality and reliability of the software being developed. It involves automatically executing a comprehensive set of tests, as part of the development and deployment pipeline.&#xA;Prerequisites &amp;nbsp; here is the preparation that need to know and will use in the follow steps\&#xA;docker github jenkins newman node allure Installation and config &amp;nbsp; install jenkins and create a volume docker pull jenkins/jenkins docker volume create jenkins-data run jenkins in daemon state docker run \ -u root \ --rm \ -d \ -p 8080:8080 \ -p 50000:50000 \ -v jenkins-data:/var/jenkins_home \ -v /var/run/docker.</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>个人经历 &amp;nbsp; 3年的马来西亚电子钱包APP支付测试经验 👉 Touch&amp;rsquo;n Go Digital&amp;nbsp; 2+年跨境电商平台速卖通的物流和结算测试经验 👉 Aliexpress&amp;nbsp; 4+年接口自动化测试经验 3+年测试效能建设，测试工具开发，测试平台搭建，持续测试 3+年测试专项经验，测试环境建设，巡检，资损防控建设，监控&#xA;我可以提供 &amp;nbsp; 完善的质量保障流程 自动化和资损防控建设 测试环境的搭建，优化，巡检，监控 测试效能建设，流程优化，提效工具建设，持续测试平台，性能测试工具&#xA;我的邮箱：xhddxiin@gmail.com</description>
    </item>
    <item>
      <title>如何做测试分析？</title>
      <link>http://localhost:1313/tech/testanalysis/</link>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/testanalysis/</guid>
      <description>什么是测试分析 &amp;nbsp; 我们站在QA的角度去审视一个项目，如果把测试阶段作为中心阶段，那么左边可以划分为测试前，右边可以测试后，而今天要说的 这个话题就属于测试前的阶段QA需要完成的工作，有些人可能会单纯的把测试分析与测试用例划等号，但是这两者并不相同，因为 他们的目的不同,测试分析主要目的是为了理清系统设计的结构，关联方，依赖项，需要提前准备那些工具和数据 从而帮助测试PM 更好的把项目进行拆分，整合，化整为零的把大的项目拆分成一个个的模块进行&#xA;怎么做测试分析 &amp;nbsp; 1.业务场景分析 &amp;nbsp; 首先需要充分的理解需求，将需求进行拆分，根据需求的不同将其进行分类为不同的场景链路，然后根据具体的场景链路再结合系统 设计文档，整理画出对应的业务流程图和系统时序图，再画图的过程中也是对需求和设计进行二次回顾思考的一个过程，可能还会发 现一些需求遗漏 或者设计不明的地方&#xA;2.接口分析 &amp;nbsp; 提供方 调用方式 类型 API RPC GET SPI HTTP POST 可以按照以上的纬度对项目里的接口进行拆解分析， 对于业务需求比较核心的API可以按照一下的角度进行接口分析覆盖，需要注意 的是异常场景还包括超时，幂等，重试等场景，需要根据实际情况具体分析，外部提供的SPI需要根据项目的进度合理安排是否需要做 MOCK服务 接口变量 接口场景 加验签 枚举校验 正向场景 - 类型校验 异常场景 - 长度校验 差错处理 - 非空校验 - - 业务校验 - - 3.DB分析 &amp;nbsp; 涉及到表的的变动的主要是写接口，可以根据梳理出来的写接口和业务场景，梳理出数据流向图和核心表的状态流转图&#xA;4.集成分析 &amp;nbsp; 主要分析备测场景的外部依赖有哪些，关联域是否有变更，是否需要外域配合，对上下游的影响评估，这块需要根据系统的改 动与关联方沟通清楚&#xA;5.灰度与监控分析 &amp;nbsp; 主要评估当前的业务场景灰度是否有遗漏，灰度的设计是否合理，是否存在歧义，需要按照业务的需求和实际情况考虑是按 买家还是卖家进行灰度，开量比例是按百分比还是千分比&#xA;日志的打印需要统一采用约定的格式进行，不可过度打印以免造成系统负担，也不可打印信息过少睁开排查问题的难度，需要 按照业务场景纬度配置监控，确保没有遗漏的场景&#xA;6.资损分析 &amp;nbsp; 如果业务需求设计到资金的进出，需要根据的记账事件梳理出所有的记账场景，编写对账脚本，按照对外&amp;gt;对内的原则进行资金 的重点核对和防控，对于预期外的异常资金流需要提前设置好发现和处理机制</description>
    </item>
    <item>
      <title>如何治理测试环境？</title>
      <link>http://localhost:1313/tech/testenvir/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/testenvir/</guid>
      <description> 测试环境为什么不稳定 &amp;nbsp; 投入不够，不重视，对问题的响应不及时 没有或者对应的流程机制不完善 测试活动会产生脏数据 工具配套不完善，测试环境的配置和生产没有保持同步 虽然有以上种种原因，但是就我这些年测试环境维护的经验来看，即便是把流程机制建立起来，工具配置和生产保持同步 问题的响应机制确立下来，线下环境也还是会不稳定，这很好理解，线下测试环境是相对于生产环境而言的，生产环境一般都 很稳定，因为生产环境不会有不稳定的代码，也不会有频繁的变更，相对而言测试环境不稳就是必然的，因为 1.线下环境本身就是服务于开发和测试，频繁变更代码配置，有不稳定的代码 2.与生产环境相对应，线下测试环境的不稳定所导致的问题和影响小 我们需要有一个地方来运行不稳定的代码，因为我们害怕不稳定代码上下后会导致很大的问题，所以测试环境的设计就是 为了低利害的处理不稳定的代码，而低厉害必然导致低优先级，故而测试环境不稳定是必然的&#xA;如何让测试环境稳定一些？ &amp;nbsp; 我觉得可以采取一下的措施来着手解决问题&#xA;明确具体原因，当遇到除自己应用代码之外的问题而导致的失败时，不要概括的说环境原因一笔带过，需要深究一下到 底是那里的原因，是配置问题？是数据库脏某张表脏数据？只有明确了具体原因，收集起常见的问题并分类，才能开始有 针对性的制定解决方案 问题分类拆解，在收集了一波“环境问题”之后，我们不难总结，这些问题无外乎来自三个地方&#xA;i.基础设施的问题 ii.代码问题 iii.配置问题 对策，基础设施的稳定是非常关键的一环。如果基础设施不稳定，就会出现“排查疲劳”：每次遇到一些奇怪的问题（启动超时、 调不通、等等），如果排查下来10次有9次是基础设施的问题，大家渐渐就不愿意排查了（因为不是代码的问题），一些真正 的代码问题也会被漏过&#xA;i.在云服务上单独开个测试环境的租户空间，使测试环境基础设施使用和生产环境一样的标准，这个阿里，蚂蚁目前都是这么做 的。线下环境直接放在基础设施的生产机房跑之后，基础设施团队直接按照运维其他生产机房那样去运维，中间件、数据库、缓存、 物理机、网络、机房等所有的监控告警、巡检、发布和变更、应急、自愈能力等等都能做到位&#xA;ii.稳定的主干环境，主干环境的稳定重点保障两个方面，一是单应用的稳定性，而是链路的稳定性，使用持续测试平台，小时级 跑脚本，跑用例，当发生了一问题，但是没有验证脚本发现时，酒吧这个问题的常见补充到链路验证脚本里去&#xA;iii.建设多套dev环境，作为开发自测和单应用提测的环境，且dev环境之间使用隔离策略 </description>
    </item>
    <item>
      <title>测开就是做工具？</title>
      <link>http://localhost:1313/tech/sdet/</link>
      <pubDate>Tue, 15 Aug 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/sdet/</guid>
      <description>我的一点想法 &amp;nbsp; 测试开发首先是测试，其次才是开发，在工作中对于项目和产品质量的把控才是第一位的， 产品的用例集，项目的测试分析文档才是QA最核心的数字资产，这些可 以帮助QA梳理产品的演进，预测和做好下一步的规划，做工具、流程或者平台，其根源是来自于各类业务测试活动，自动化只能降低回归测试的成本 （比如执行 时间、环境构建销毁流程自动化等），而不能取代手工测试，也不可能提供更高的覆盖度。用例集不断扩充往往还是需要有手工测试先去验证，而后再转成符合流 程规定的自动化测试用例。一个比较好的实践方式是，基于对测试场景、测试流程的理解，抽象泛化出测试工具、流水线来提升测试过程的执行效率；当测试业务变 得复杂，需要对测试过程进行生命周期管理的时候，再将测试流水线升级为测试平台。如果只是为了体现“测试技术水平”而强行做一个测试平台， 往往因为缺乏现 实体验和灵活性，反而会制约质量的良性发展。</description>
    </item>
    <item>
      <title>Jmeter实现分布式压测</title>
      <link>http://localhost:1313/tech/loadtest/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tech/loadtest/</guid>
      <description>1、为什么需要分布式测试？ &amp;nbsp; 在Jmeter中使用一个线程来模拟真实环境的一个用户，如对一个HTTP接口模拟100并发，那么在Jmeter中就需要创建100个线程来向该接口发送请求。 因为Jmeter是用Java语言开发，每创建一个线程JDK5之后的版本，JVM默认会为每个线程分配1M的堆栈内存空间（JDK5之前是256KB），可通过 -XssJVM参数调整。如果单机要模拟较大并发量的情况下，很难满足测试需求。比如对某一个服务集群模拟10万的并发，那么就需要10万个线程， 就需要98GB（100000*1/1024）左右的物理内存，很少情况会有一台超100GB内存的机器用来做测试，加上测试的需求不一。这种测试需求下， 可以将一般配置（4核8G/16G&amp;hellip;）的多台机器组织成一个集群，在每台机器上安装并启动一个Jmeter服务，以少聚多的方式来应对大并发测试 的场景。&#xA;2、分布式测试原理 &amp;nbsp; Jmeter分布式测试环境中有两个角色：Controller（1）和Agent（N） Controller节点：向参与的Agent节点发送测试脚本，并聚合Agent节点的执行结果 Agent节点：接收并执行Controller节点发送过来的测试脚本，并将执行结果返回给Controller&#xA;3、安装部署 &amp;nbsp; 所有节点IP都必须安装Jmeter，且版本一致 wget http://mirror.bit.edu.cn/apache//jmeter/binaries/apache-jmeter-5.0.tgz //下载jmeter tar -jxvf apache-jmeter-[version].tgz //解压 4、设置SSL证书 &amp;nbsp; cd $JMETER_HOME/bin ./create-rmi-keystore.sh 您的名字与姓氏是什么？rmi；rmi是默认配置名称，如果不是这个名称，需要修改$JMETER_HOME/bin/jmeter.properties文件：server.rmi.ssl.keystore.alias 的值 最后一步密钥库口令：不要输入密码，直接回车 拷贝rmi_keystore.jks文件到所有节点（Controller和Agents）的bin目录下 5、Controller配置 &amp;nbsp; vim $JMETER_HOME/bin/jmeter.properties 把所有加入测试的Agent节点IP添加到remote_hosts配置中，多个IP之间用逗号分隔，Jmeter server 默认端口号为：1099，IP后面没有加端口则使用默认端口。 remote_hosts=127.0.0.1 remote_host=192.168.0.1,192.168.0.2 6、测试 &amp;nbsp; controller机器上启动jmeter $JMETER_HOME/jmeter.sh 编写好压测脚本 添加线程组 jmeter -n -t ~/Desktop/dcpp-data-collect.jmx -R 192.168.0.1:1099,192.168.0.2:1099 -l ~/Desktop/dcpp.log -e -o ~/Desktop/dcpp 命令行指定远程机器运行，GUI-&amp;gt;运行-&amp;gt;远程运行。 不填IP则为指定所有远程机器运行 7、注意事项 &amp;nbsp; 检查防火墙是否过滤了rmi端口，默认1099.或者关闭防火墙 确保所有节点处理同一子网中</description>
    </item>
  </channel>
</rss>
